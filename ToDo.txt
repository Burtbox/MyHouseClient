Look into ETag to replace no-cache!

sort out user objects! All over the place atm

Clean up and type reducer and action code

sort out code formatter vs linter!

Design a pattern for React/Redux usage - guidelines:
    UI State (e.g. loading) - react state
    Data from DB - redux store

    Takeaway: keep UI state and transitory data (such as form inputs) in local state.
    Takeaway: keep data that you intend to share across components in store.

look into Redux-offline (new package to handle offline)

setup Enzyme/Jest mocking for api calls

switch to ts-lint-react for linter as inconsistent spacing between dom (2 spaces) and code (4 spaces)

Flag user as deleted, then a leave household button suffices, Hangfire background cleanup task after a month

Switch to redux loading through action and grab from props (remove loading flags from reducers) =>  make app wide loading thing (steal from HouseFood)

Refactor unit tests - can test each refactored stateless component separately for better unit tests! 

Need to build the invite to household functionality! (see nodeJs app)

BUGS:
make nav sidebar and form content responsive (if sidebar hidden expand form div!)
errors from API not returning to client properly! Should pop as error message!